import React, { Component, memo } from 'react'
import PropTypes from 'prop-types'
import styled from 'styled-components'
import moment from 'moment'
import Link from 'next/link'
import { convertFromRaw, EditorState, ContentState } from 'draft-js'
import TagWithLink from '../TagWithLink'
import Icon from '../../assets/icons'
import classes from './index.scss'

class QuestionSummary extends Component {
  getDescriptionText = description => {
    try {
      const richTextJson = JSON.parse(description)
      return EditorState.createWithContent(convertFromRaw(richTextJson))
        .getCurrentContent()
        .getPlainText()
    } catch (err) {
      // If JSON.parse fails means we have regular text instead of one generated by rich text editor
      return description
    }
  }

  render() {
    let formatDate = moment(createdAt).fromNow()
    const {
      score,
      answers,
      title,
      description,
      createdAt,
      tags,
      authorUsername,
      questionId,
      authorId,
      slug,
    } = this.props
    const descriptionText = this.getDescriptionText(description)

    return (
      <Wrapper>
        <Link as={`question/${questionId}/${slug}`} href={`question/?title=${questionId}`}>
          <Title>{title}</Title>
        </Link>

        <Row>
          <Link href={`/profile/?=${authorId}`} as={`/profile/${authorId}/${authorUsername}`}>
            <UserAvatar src="https://hashnode.imgix.net/res/hashnode/image/upload/v1559555582766/Bm5xyeBqE.jpeg?w=80&h=80&fit=crop&crop=faces&auto=format,enhance&q=60" />
          </Link>
          <Link href={`/profile/?=${authorId}`} as={`/profile/${authorId}/${authorUsername}`}>
            <UserDisplayName>{authorUsername}</UserDisplayName>
          </Link>

          <DotTextSeparator />
          <Date>{formatDate}</Date>
        </Row>

        <Description>{descriptionText}</Description>
        <TagsList>
          {tags.map(tag => (
            <TagWithLink key={tag.id + tag.slug} text={tag.title} url="/" style={{ marginRight: '5px' }} />
          ))}
        </TagsList>
        <CountersRow>
          <ScoreCounterIcon src="https://d3h1a9qmjahky9.cloudfront.net/app-1-min.png" />
          <CounterValue>{score}</CounterValue>

          <AnswersCommentsCouterIcon name="comments" height="18px" />
          <CounterValue>{answers.length}</CounterValue>
        </CountersRow>
      </Wrapper>
    )
  }
}
QuestionSummary.propTypes = {
  authorId: PropTypes.number.isRequired,
  authorUsername: PropTypes.string.isRequired,
  questionId: PropTypes.number.isRequired,
  slug: PropTypes.string.isRequired,
  answers: PropTypes.array.isRequired,
  score: PropTypes.number.isRequired,
  createdAt: PropTypes.string.isRequired,
  tags: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.number.isRequired,
      slug: PropTypes.string.isRequired,
      title: PropTypes.string.isRequired,
    })
  ),
}

const Wrapper = styled.div`
  position: relative;
  margin-bottom: 16px;
  padding: 0.9rem;
  background: white;
  border-radius: 8px;
  border: 1px solid #e0e0e0;
`

const Row = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 7px;
`

const Title = styled.p`
  font-size: 20px;
  font-weight: bold;
  line-height: 28px;
  color: #000;
  margin-right: 8px;
  cursor: pointer;
  width: 100%;
  @media screen and (max-width: 745px) {
    font-size: 24px;
    max-width: 70%;
    width: auto;
  }
`

const UserAvatar = styled.img`
  width: 24px;
  height: 24px;
  border-radius: 100%;
  margin-right: 6px;
  cursor: pointer;
`

const UserDisplayName = styled.span`
  color: #000;
  font-size: 0.95rem;
  font-weight: bold;
  margin-right: 6px;
  cursor: pointer;
`

const DotTextSeparator = styled.div`
  margin-right: 6px;
  background: #000;
  width: 3px;
  height: 3px;
  border-radius: 50%;
`

const Date = styled.span`
  color: ${props => props.theme.darkGrey};
  font-size: 14px;
  width: 30%;
  @media screen and (max-width: 745px) {
    max-width: 30%;
  }
`

const Description = styled.p`
  color: ${props => props.theme.darkGrey};
  font-size: 0.9rem;
`

const TagsList = styled.div`
  margin-bottom: 20px;
`

const CountersRow = styled(Row)`
  margin-right: 5px;
`

const ScoreCounterIcon = styled.img`
  width: 18px;
  height: 18px;
  margin-right: 7px;
`

const AnswersCommentsCouterIcon = styled(Icon)`
  margin-right: 7px;
`

const CounterValue = styled.span`
  display: inline-block;
  color: #4d4d4d;
  font-weight: bold;
  margin-right: 18px;
`

export default QuestionSummary
